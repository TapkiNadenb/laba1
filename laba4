"""
16. Формируется матрица F следующим образом: скопировать в нее А и  если в Е максимальный элемент в
нечетных столбцах больше, чем сумма чисел в нечетных строках, то поменять местами С и В симметрично, иначе
В и Е поменять местами несимметрично. При этом матрица А не меняется. После чего если определитель
матрицы А больше суммы диагональных элементов матрицы F, то вычисляется выражение: A-1*AT – K * F-1,
иначе вычисляется выражение (AТ +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А.
Выводятся по мере формирования А, F и все матричные операции последовательно.
"""
import numpy as np
import matplotlib.pyplot as plt

"""
Функция для создания матрицы A с целенаправленным заполнением
"""
def create_matrix_A(N):
    """
    Заполнение подматриц целенаправленными значениями для отладки
    """
    B = np.full((N // 2, N // 2), 1)
    C = np.full((N // 2, N // 2), 2)
    D = np.full((N // 2, N // 2), 3)
    E = np.full((N // 2, N // 2), 4)
    """
    Сборка матрицы A из подматриц
    """
    A = np.block([[B, C], [D, E]])
    return A

"""
Функция для формирования матрицы F
"""
def create_matrix_F(A):
    N = A.shape[0]
    F = A.copy()
    E = A[N // 2:, N // 2:]
    C = A[:N // 2, N // 2:]
    B = A[:N // 2, :N // 2]

    max_in_odd_columns = np.max(E[:, 1::2])
    sum_in_odd_rows = np.sum(E[1::2, :], axis=1).sum()

    if max_in_odd_columns > sum_in_odd_rows:
        F[:N // 2, N // 2:], F[:N // 2, :N // 2] = B, C
    else:
        F[:N // 2, :N // 2], F[N // 2:, N // 2:] = E, B
    return F

"""
Функция для выполнения матричных операций
"""
def matrix_operations(A, F, K):
    if np.linalg.det(A) > np.trace(F):
        result = np.linalg.inv(A) @ A.T - K * np.linalg.inv(F)
    else:
        G = np.tril(A)
        result = (A.T + G - F.T) * K
    return result

"""
Функция для построения графиков
"""
def plot_graphs(matrix):
    plt.figure(figsize=(18, 5))
    """
    Тепловая карта матрицы
    """
    plt.subplot(1, 3, 1)
    plt.title('Heatmap of the Matrix')
    plt.imshow(matrix, cmap='viridis')
    plt.colorbar()
    """
    Гистограмма сумм строк матрицы
    """
    plt.subplot(1, 3, 2)
    plt.title('Row Sums of the Matrix')
    row_sums = np.sum(matrix, axis=1)
    plt.bar(np.arange(len(row_sums)), row_sums)
    """
    График сумм столбцов матрицы
    """
    plt.subplot(1, 3, 3)
    plt.title('Column Sums of the Matrix')
    col_sums = np.sum(matrix, axis=0)
    plt.plot(col_sums)

    plt.tight_layout()
    plt.show()

"""
Основная функция
"""
def main():
    K = int(input("Введи число K: "))
    N = int(input("Введи размерность матрицы N ( Она должна быть Чётной ): "))

    if N % 2 != 0:
        print("N должно быть четным числом.")
        return

    A = create_matrix_A(N)
    print("Матрица A:")
    print(A)
    plot_graphs(A)

    F = create_matrix_F(A)
    print("Матрица F после модификации:")
    print(F)
    plot_graphs(F)

    result = matrix_operations(A, F, K)
    print("Результат матричных операций:")
    print(result)
    plot_graphs(result)


if __name__ == "__main__":
    main()
