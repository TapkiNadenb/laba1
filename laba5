"""
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления данной функции рекурсивно и итерационно.
Определить границы применимости рекурсивного и итерационного подхода. Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
16.	F(0) = 1, F(1) = 1, F(n) = (-1)n*(F(n–1) + 2*F(n-2) /(2n)!), при n > 1
"""

import matplotlib.pyplot as plt
import time

# Мемоизация для факториала
factorial_cache = {0: 1}

def factorial(n):
    if n not in factorial_cache:
        factorial_cache[n] = n * factorial(n - 1)
    return factorial_cache[n]

# Мемоизация для функции F
F_cache = {0: 1, 1: 1}

# Pекурсивный подход с использованием мемоизации
def recursive_F(n):
    if n not in F_cache:
        sign = -1 if n % 2 else 1
        F_cache[n] = sign * (recursive_F(n - 1) + 2 * recursive_F(n - 2)) / factorial(2 * n)
    return F_cache[n]

# Итеративный подход с использованием кэша факториала
def iterative_F(n):
    if n in F_cache:
        return F_cache[n]

    f0, f1 = 1, 1
    for i in range(2, n + 1):
        sign = -1 if i % 2 else 1
        fi = sign * (f1 + 2 * f0) / factorial(2 * i)
        f0, f1 = f1, fi
        F_cache[i] = fi

    return F_cache[n]

# Сравнение времени выполнения
print("| n | Recursive time | Iterative time |")
print("|---|---------------|----------------|")

n_values = list(range(1, 11))
recursive_times = []
iterative_times = []

for n in n_values:
    recursive_start_time = time.perf_counter()
    recursive_F(n)
    recursive_time = time.perf_counter() - recursive_start_time
    recursive_times.append(recursive_time)

    iterative_start_time = time.perf_counter()
    iterative_F(n)
    iterative_time = time.perf_counter() - iterative_start_time
    iterative_times.append(iterative_time)

    print("|", n, "|", round(recursive_time, 10), "|", round(iterative_time, 10), "|")

# Вывод графика
plt.plot(n_values, recursive_times, label='Recursive time')
plt.plot(n_values, iterative_times, label='Iterative time')
plt.xlabel('n')
plt.ylabel('Time (seconds)')
plt.legend()
plt.show()

