'''
В пассажирском поезде 9 вагонов. Выведите все возможные варианты рассадки в поезде 4 человек, при условии,
что все они должны ехать в различных вагонах?
'''

'''
Алгоритмический подход
'''
import time
def algorithmiki():
    results = []
    # Создаем пустой список для хранения результатов
    for i in range(1, 10):
        # Цикл для первого человека в диапазоне от 1 до 9 вагонов
        for j in range(1, 10):
            # Второй цикл для второго человека в диапазоне от 1 до 9 вагонов
            if j != i:
                # Проверка на то, что первый человек не в одном вагоне со вторым
                for k in range(1, 10):
                    # Третий цикл для третьего человека в диапазоне от 1 до 9 вагонов
                    if k != i and k != j:
                        for l in range(1, 10):
                            # Четвертый цикл для четвертого человека в диапазоне от 1 до 9 вагонов
                            if l != i and l != j and l != k: # Проверка
                                results.append((i, j, k, l))
    return results
start_time = time.time()
# Записываем время начала выполнения алгоритма
algorithmic_results = algorithmiki()
# Вызываем функцию и сохраняем результаты
end_time = time.time()
# Записываем время окончания выполнения алгоритма
print("Затраченно времени в секундах:", end_time - start_time)
print("Всего комбинаций:", len(algorithmic_results))



'''
C помощью функций Питона
'''
from itertools import permutations
import time

# Функция для генерации всех возможных вариантов рассадки
def generate_seating():
    # Создаем список всех вагонов
    train_cars = range(1, 10)
    # Используем функцию permutations для генерации всех возможных комбинаций рассадки 4 человек в 9 вагонах
    seating_combinations = list(permutations(train_cars, 4))
    return seating_combinations

# Засекаем время начала выполнения
start_time = time.time()

# Генерация и вывод всех возможных вариантов рассадки
seatings = generate_seating()


# Вывод количества всех возможных комбинаций
print("Всего комбинаций:", len(seatings))

# Засекаем время окончания выполнения и выводим разницу
end_time = time.time()
elapsed_time = end_time - start_time
print("Затраченно времени в секундах:", elapsed_time)
