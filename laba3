# #1.	Формируется матрица F следующим образом: если в Е минимальный элемент в нечетных столбцах в области 1 больше, чем
# # сумма чисел в нечетных строках в области 3, то поменять в В симметрично области 3 и 2 местами, иначе В и Е поменять
# # местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение: (К*F)*А– K*AT . Выводятся по
# # мере формирования А, F и все матричные операции последовательно.
def print_matrix(matrix):
    for row in matrix:
        print(' '.join(map(str, row)))
    print()
def transpose(matrix):
    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]
    return transposed
def matrix_multiply(a, b):
    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]
    for i in range(len(a)):
        for j in range(len(b[0])):
            for k in range(len(b)):
                result[i][j] += a[i][k] * b[k][j]
    return result
def scalar_multiply(k, matrix):
    return [[k * matrix[i][j] for j in range(len(matrix[0]))] for i in range(len(matrix))]

K = int(input("Введи K: "))
N = int(input("Введи N: "))
A = [[(i * N + j) % 21 - 10 for j in range(N)] for i in range(N)]  # Заполнение матрицы для тестирования

print("Матрица A:")
print_matrix(A)

mid = N // 2
B = [row[:mid] for row in A[:mid]]
C = [row[mid:] for row in A[:mid]]
D = [row[:mid] for row in A[mid:]]
E = [row[mid:] for row in A[mid:]]

F = [row[:] for row in A]

# Ищем минимальное значение в верхнем треугольнике подматрицы E (включая главную диагональ)
min_in_E = float('inf')  # Инициализируем переменную очень большим числом
for i in range(mid):
    for j in range(i, mid):  # Начинаем с i, чтобы взять верхний треугольник
        min_in_E = min(min_in_E, E[i][j])

# Считаем сумму элементов в нижнем треугольнике подматрицы D (включая главную диагональ)
sum_in_D = 0  # Инициализируем сумму нулем
for i in range(mid):
    for j in range(i + 1):  # Ограничиваемся i, чтобы взять нижний треугольник
        sum_in_D += D[i][j]

if min_in_E > sum_in_D:
    for i in range(mid):
        for j in range(mid):
            if i % 2 == 0:
                F[i][j + mid], F[i + mid][j] = F[i + mid][j], F[i][j + mid]
else:
    for i in range(mid):
        for j in range(mid):
            F[i][j], F[i + mid][j + mid] = A[i + mid][j + mid], A[i][j]

print("Матрица F:")
print_matrix(F)

KF = scalar_multiply(K, F)
KFA = matrix_multiply(KF, A)
KAT = scalar_multiply(K, transpose(A))
result = [[KFA[i][j] - KAT[i][j] for j in range(N)] for i in range(N)]

print("Результат выражения (K*F)*A – K*A^T:")
print_matrix(result)
