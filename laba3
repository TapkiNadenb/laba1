# #1.	Формируется матрица F следующим образом: если в Е минимальный элемент в нечетных столбцах в области 1 больше, чем
# # сумма чисел в нечетных строках в области 3, то поменять в В симметрично области 3 и 2 местами, иначе В и Е поменять
# # местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение: (К*F)*А– K*AT . Выводятся по
# # мере формирования А, F и все матричные операции последовательно.
import random
def generate_matrix(N):
    return [[random.randint(-10, 10) for _ in range(N)] for _ in range(N)]
def print_matrix(matrix):
    for row in matrix:
        print(row)
def min_element(matrix):
    min_elem = float('inf')
    min_row = -1
    min_col = -1
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] < min_elem:
                min_elem = matrix[i][j]
                min_row = i
                min_col = j
    return min_elem, min_row, min_col
def check_condition(matrix, min_row, min_col):
    sum_odd_rows = sum(matrix[i][j] for i in range(len(matrix)) if i % 2 != 0 for j in range(len(matrix[i])))
    min_elem, _, _ = min_element(matrix)
    return min_elem > sum_odd_rows
def swap_elements(matrix, row1, col1, row2, col2):
    matrix[row1][col1], matrix[row2][col2] = matrix[row2][col2], matrix[row1][col1]
def main():
    K = int(input("Введи значение K: "))
    N = int(input("Введи размерность матрицы N: "))
    A = generate_matrix(N)
    print("Матрица A:")
    print_matrix(A)
    B = generate_matrix(N)
    C = generate_matrix(N)
    D = generate_matrix(N)
    E = generate_matrix(N)
    F = B
    min_elem, min_row, min_col = min_element(E)
    if check_condition(E, min_row, min_col):
        for i in range(N):
            for j in range(N):
                B[i][j], C[i][j] = C[i][j], B[i][j]
    else:
        B, F = F, E
    result = [[(K * F[i][j]) * A[i][j] - (K * A[i][j]) for j in range(N)] for i in range(N)]
    print("Матрица F:")
    print_matrix(F)
    print("Матрица всех результатов:")
    print_matrix(result)
if __name__ == "__main__":
    main()
